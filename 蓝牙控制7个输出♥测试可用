#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include "BluetoothSerial.h"

// 定义 7 个输出控制的引脚
const int outputPins[] = {16, 17, 18, 19, 21, 22, 23};

// 用于记录当前的自锁状态，true 为开启，false 为关闭
bool selfLockState = false;

// OLED 显示屏相关定义
Adafruit_SSD1306 display(128, 64, &Wire, -1);

// 记录上一次的输出状态
String lastOutputStates[7];

// 初始化蓝牙串口
BluetoothSerial SerialBT;

void setup() {
    // 初始化串口通信，波特率可根据需要设置
    Serial.begin(115200);

    // 设置 7 个输出引脚为输出模式
    for (int i = 0; i < 7; i++) {
        pinMode(outputPins[i], OUTPUT);
        digitalWrite(outputPins[i], LOW);
        lastOutputStates[i] = "Output: OFF";  // 初始状态
    }

    // 初始化 OLED 显示屏
    Wire.begin(1, 3);
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("OLED display initialization failed!");
        // 尝试重新初始化，可设置重试次数等
        for (int i = 0; i < 3; i++) {
            delay(1000);
            if (display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
                Serial.println("OLED display successfully reinitialized!");
                break;
            }
        }
        if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
            Serial.println("Failed to reinitialize OLED display. Please check connections.");
            while (1);
        }
    }
    // 显示开机界面
    showBootScreen();

    SerialBT.begin("esp32_bluetooth");
}

void showBootScreen() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);

    // 绘制心形图案
    const uint8_t heart[] = {
        0b00000000,
        0b00000000,
        0b00100100,
        0b01111110,
        0b11111111,
        0b11111111,
        0b01111110,
        0b00111100,
        0b00011000,
        0b00001000,
        0b00000000,
        0b00000000
    };

    for (int y = 0; y < 12; y++) {
        for (int x = 0; x < 8; x++) {
            if (heart[y] & (1 << (7 - x))) {
                display.drawPixel(x * 2 + 50, y * 2 + 20, WHITE);
            }
        }
    }

    // 显示欢迎信息
    display.setCursor(0, 0);
    display.println("ESP32 Booting...");

    display.display();
    delay(2000);  // 延迟2秒显示开机界面
}
void processBluetoothCommand() {
    if (SerialBT.available()) {
        String command = SerialBT.readStringUntil('\n');
        Serial.println(command);
        if (command.length() == 2) {
            int pinIndex = command.charAt(0) - '0';
            if (pinIndex >= 0 && pinIndex < 7) {
                String state = command.substring(1);
                if (state == "H") {
                    digitalWrite(outputPins[pinIndex], HIGH);
                    selfLockState = false;
                } else if (state == "L") {
                    digitalWrite(outputPins[pinIndex], LOW);
                    selfLockState = true;
                }
                updateDisplay();
            }
        }
    }
}

void updateDisplay() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    for (int i = 0; i < 7; i++) {
        bool currentOutputStateValue = digitalRead(outputPins[i]);
        String currentOutputState = currentOutputStateValue ? "Output: ON" : "Output: OFF";
        display.println(currentOutputState);
    }

    display.display();
    Serial.println("Display updated");  // 调试信息
}

void loop() {
    processBluetoothCommand();

    for (int i = 0; i < 7; i++) {
        bool currentOutputStateValue = digitalRead(outputPins[i]);
        String currentOutputState = currentOutputStateValue ? "Output: ON" : "Output: OFF";
        if (currentOutputState != lastOutputStates[i]) {
            lastOutputStates[i] = currentOutputState;
        }
    }

    updateDisplay();
}
