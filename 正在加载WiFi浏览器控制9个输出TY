#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>

// 定义 9 个输出控制的引脚
const int outputPins[] = {16, 17, 18, 19, 21, 22, 23, 32, 33};

// 最大 WiFi 连接尝试次数
const int maxWiFiConnectAttempts = 5;

// 用于记录当前的自锁状态，true 为开启，false 为关闭
bool selfLockState = false;

WebServer server(80);

// WiFi 网络的 SSID 和密码，需根据实际情况修改
const char* ssid = "2.4G";
const char* password = "8888888888";

// OLED 显示屏相关定义
Adafruit_SSD1306 display(128, 64, &Wire, -1);

// 用于记录是否通过局域网控制了输出引脚电平
bool isLanControlled = false;

// 记录上一次的输出状态和 IP 地址
String lastOutputStates[9];
String lastIPAddress = "";

// 存储 IP 地址的字符串
String ipAddressString;

// 当前显示的页面
int currentPage = 0;
const int totalPages = 2;

// 上次翻页的时间
unsigned long lastPageFlipTime = 0;
const unsigned long pageFlipInterval = 5000;  // 每 5 秒翻页一次

// 用于 OLED 显示屏更新计数
int displayUpdateCounter = 0;
const int displayUpdateInterval = 10;  // 每 10 次循环更新一次显示屏

void setup() {
    // 初始化串口通信，波特率可根据需要设置
    Serial.begin(115200);

    // 设置 9 个输出引脚为输出模式
    for (int i = 0; i < 9; i++) {
        pinMode(outputPins[i], OUTPUT);
        digitalWrite(outputPins[i], LOW);
        lastOutputStates[i] = "Output: OFF";  // 初始状态
    }

    // 尝试连接 WiFi
    int wifiConnectAttempts = 0;
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED && wifiConnectAttempts < maxWiFiConnectAttempts) {
        delay(5000);
        Serial.print(".");
        wifiConnectAttempts++;
    }

    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi connection failed!");
        while (1);
    } else {
        ipAddressString = "IP: " + WiFi.localIP().toString();
        Serial.println("WiFi connected");
        Serial.println(ipAddressString);

        // 初始化 OLED 显示屏
        Wire.begin(1, 3);
        if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
            Serial.println("OLED display initialization failed!");
            // 尝试重新初始化，可设置重试次数等
            for (int i = 0; i < 3; i++) {
                delay(1000);
                if (display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
                    Serial.println("OLED display successfully reinitialized!");
                    break;
                }
            }
            if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
                Serial.println("Failed to reinitialize OLED display. Please check connections.");
                while (1);
            }
        }
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Loading");
    display.display();
    delay(2000); // 暂停2秒
    display.clearDisplay();

        // 启动 Web 服务器
        server.begin();
        // 设置控制路由
        for (int i = 0; i < 9; i++) {
            String route = "/control" + String(i);
            server.on(route.c_str(), [i]() {
                handleControl(i);
            });
        }
        server.on("/", handleRoot);
    }
}

void handleControl(int pinIndex) {
    if (server.hasArg("state")) {
        String state = server.arg("state");
        if (state == "high") {
            digitalWrite(outputPins[pinIndex], HIGH);
            isLanControlled = true;
            selfLockState = false;
            lastOutputStates[pinIndex] = "Output: ON";  // 更新状态
            Serial.printf("Pin %d set to HIGH\n", pinIndex);  // 调试信息
        } else if (state == "low") {
            digitalWrite(outputPins[pinIndex], LOW);
            isLanControlled = true;
            selfLockState = true;
            lastOutputStates[pinIndex] = "Output: OFF";  // 更新状态
            Serial.printf("Pin %d set to LOW\n", pinIndex);  // 调试信息
        }
    }
    server.send(200, "text/plain", "Output state set");
}

void handleRoot() {
    String html = "<html><head><title>Relay Control</title></head><body>";
    html += "<h1>Relay Control</h1>";
    html += "<p>IP Address: " + WiFi.localIP().toString() + "</p>";
    for (int i = 0; i < 9; i++) {
        html += "<p>";
        html += "<form action='/control" + String(i) + "' method='get'>";
        html += "<button type='submit' name='state' value='high'>Turn On Relay " + String(i + 1) + "</button>";
        html += "&nbsp;";
        html += "<button type='submit' name='state' value='low'>Turn Off Relay " + String(i + 1) + "</button>";
        html += "</form>";
        html += "</p>";
    }
    html += "</body></html>";
    server.send(200, "text/html", html);
}

void updateDisplay() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println(ipAddressString);

    if (currentPage == 0) {
        for (int i = 0; i < 6; i++) {
            display.println(lastOutputStates[i]);
        }
    } else if (currentPage == 1) {
        for (int i = 6; i < 9; i++) {
            display.println(lastOutputStates[i]);
        }
    }

    display.display();
    Serial.println("Display updated");  // 调试信息
}

void loop() {
    // 检查 WiFi 状态，如果断开尝试重新连接
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi disconnected, attempting to reconnect...");
        WiFi.begin(ssid, password);
        while (WiFi.status() != WL_CONNECTED) {
            delay(5000);
            Serial.print(".");
        }
        Serial.println("WiFi reconnected");
        // 更新 IP 地址字符串
        ipAddressString = "IP: " + WiFi.localIP().toString();
        Serial.println(ipAddressString);
    }

    for (int i = 0; i < 9; i++) {
        bool currentOutputStateValue = digitalRead(outputPins[i]);
        String currentOutputState = currentOutputStateValue ? "Output: ON" : "Output: OFF";
        if (currentOutputState != lastOutputStates[i]) {
            lastOutputStates[i] = currentOutputState;
            Serial.printf("Pin %d state changed to %s\n", i, currentOutputState.c_str());  // 调试信息
        }
    }

    displayUpdateCounter++;
    if (displayUpdateCounter >= displayUpdateInterval) {
        // 检查 IP 地址是否变化
        if (ipAddressString != lastIPAddress) {
            updateDisplay();
            lastIPAddress = ipAddressString;
        } else {
            updateDisplay();  // 强制更新显示
        }
        displayUpdateCounter = 0;
    }

    // 每 5 秒翻页一次
    unsigned long currentTime = millis();
    if (currentTime - lastPageFlipTime >= pageFlipInterval) {
        currentPage = (currentPage + 1) % totalPages;
        lastPageFlipTime = currentTime;
        updateDisplay();
    }

    server.handleClient();
}
